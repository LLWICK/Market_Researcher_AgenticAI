#test_dashboard.py

#!/usr/bin/env python3
"""
Test script for Agent 4 Dashboard functionality

This script tests the dashboard functions without launching Streamlit
to ensure all components work correctly.
"""

import json
import pandas as pd
from pathlib import Path
import sys

# Add current directory to path for imports
sys.path.insert(0, str(Path(__file__).parent))

# Import dashboard functions
from dashboard import (
    load_comparison_data,
    create_competitor_dataframe,
    create_feature_analysis_dataframe,
    create_score_comparison_chart,
    create_radar_chart,
    create_feature_weights_chart,
    create_analysis_weights_chart,
    create_trend_analysis_chart
)

def test_data_loading():
    """Test data loading functionality"""
    print("🔍 Testing data loading...")
    
    try:
        data = load_comparison_data()
        if data:
            print("✅ Data loaded successfully")
            print(f"   - Competitors: {len(data.get('comparison', {}).get('scores', {}))}")
            print(f"   - Market: {data.get('request', {}).get('market', 'Unknown')}")
            print(f"   - Generated by: {data.get('metadata', {}).get('generated_by', 'Unknown')}")
            return data
        else:
            print("❌ No data loaded")
            return None
    except Exception as e:
        print(f"❌ Error loading data: {e}")
        return None

def test_dataframe_creation(data):
    """Test DataFrame creation functions"""
    print("\n🔍 Testing DataFrame creation...")
    
    try:
        # Test competitor DataFrame
        competitors_df = create_competitor_dataframe(data)
        if not competitors_df.empty:
            print("✅ Competitor DataFrame created successfully")
            print(f"   - Shape: {competitors_df.shape}")
            print(f"   - Columns: {list(competitors_df.columns)}")
            print(f"   - Top performer: {competitors_df.iloc[0]['Competitor']}")
        else:
            print("❌ Competitor DataFrame is empty")
        
        # Test feature DataFrame
        features_df = create_feature_analysis_dataframe(data)
        if not features_df.empty:
            print("✅ Feature DataFrame created successfully")
            print(f"   - Shape: {features_df.shape}")
            print(f"   - Categories: {features_df['Category'].unique()}")
        else:
            print("❌ Feature DataFrame is empty")
        
        return competitors_df, features_df
        
    except Exception as e:
        print(f"❌ Error creating DataFrames: {e}")
        return None, None

def test_chart_creation(competitors_df, features_df):
    """Test chart creation functions"""
    print("\n🔍 Testing chart creation...")
    
    try:
        # Test score comparison chart
        score_chart = create_score_comparison_chart(competitors_df)
        if score_chart and hasattr(score_chart, 'data'):
            print("✅ Score comparison chart created successfully")
        else:
            print("❌ Score comparison chart creation failed")
        
        # Test radar chart (now improved)
        radar_chart = create_radar_chart(competitors_df)
        if radar_chart and hasattr(radar_chart, 'data'):
            print("✅ Radar chart created successfully")
        else:
            print("❌ Radar chart creation failed")
        
        # Test feature weights chart
        if not features_df.empty:
            feature_chart = create_feature_weights_chart(features_df)
            if feature_chart and hasattr(feature_chart, 'data'):
                print("✅ Feature weights chart created successfully")
            else:
                print("❌ Feature weights chart creation failed")
        
        # Test analysis weights chart
        if not features_df.empty:
            analysis_chart = create_analysis_weights_chart(features_df)
            if analysis_chart and hasattr(analysis_chart, 'data'):
                print("✅ Analysis weights chart created successfully")
            else:
                print("❌ Analysis weights chart creation failed")
        
        print("✅ All chart tests completed")
        
    except Exception as e:
        print(f"❌ Error creating charts: {e}")

def test_data_validation(data):
    """Test data validation and structure"""
    print("\n🔍 Testing data validation...")
    
    try:
        # Check required fields
        required_fields = ['comparison', 'request', 'metadata']
        for field in required_fields:
            if field in data:
                print(f"✅ {field} field present")
            else:
                print(f"❌ {field} field missing")
        
        # Check comparison structure
        comparison = data.get('comparison', {})
        if 'scores' in comparison and 'ranking' in comparison:
            print("✅ Comparison structure valid")
            scores = comparison['scores']
            ranking = comparison['ranking']
            print(f"   - Scores: {scores}")
            print(f"   - Ranking: {ranking}")
        else:
            print("❌ Comparison structure invalid")
        
        # Check request structure
        request = data.get('request', {})
        if 'market' in request and 'feature_weights' in request:
            print("✅ Request structure valid")
            print(f"   - Market: {request['market']}")
            print(f"   - Feature weights: {request['feature_weights']}")
        else:
            print("❌ Request structure invalid")
        
        # Check metadata structure
        metadata = data.get('metadata', {})
        if 'generated_by' in metadata and 'timestamp' in metadata:
            print("✅ Metadata structure valid")
            print(f"   - Generated by: {metadata['generated_by']}")
            print(f"   - Timestamp: {metadata['timestamp']}")
        else:
            print("❌ Metadata structure invalid")
        
    except Exception as e:
        print(f"❌ Error validating data: {e}")

def main():
    """Run all dashboard tests"""
    print("🔒 Agent 4: Dashboard Functionality Test")
    print("=" * 50)
    
    # Test 1: Data loading
    data = test_data_loading()
    if not data:
        print("\n❌ Cannot proceed with tests - no data available")
        print("💡 Run Agent 4 first: uv run python -m Competitor_Comparison_Agent.agent4.main")
        return
    
    # Test 2: DataFrame creation
    competitors_df, features_df = test_dataframe_creation(data)
    if competitors_df is None:
        print("\n❌ Cannot proceed with chart tests - DataFrame creation failed")
        return
    
    # Test 3: Chart creation
    test_chart_creation(competitors_df, features_df)
    
    # Test 4: Data validation
    test_data_validation(data)
    
    print("\n" + "=" * 50)
    print("🎉 Dashboard functionality test completed!")
    print("💡 If all tests passed, the dashboard should work correctly.")
    print("🚀 Launch with: uv run streamlit run dashboard.py")

if __name__ == "__main__":
    main()





